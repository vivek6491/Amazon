pipeline {
    agent any

    environment {
        SONARQUBE = 'SonarQubeServer'
        MAVEN_HOME = tool 'Maven 3.9.11'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/vivek6491/Amazon.git', branch: 'master'
            }
        }

        stage('Build WAR') {
            steps {
                dir('Amazon') {
                    sh "${MAVEN_HOME}/bin/mvn clean install -DskipTests"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Amazon') {
                    withSonarQubeEnv("${SONARQUBE}") {
                        sh "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.verbose=true -Dsonar.qualitygate.wait=true"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Deploy to Tomcat via Ansible') {
            steps {
                withCredentials([string(credentialsId: 'ansible-vault-password', variable: 'VAULT_PASS')]) {
                    script {
                        // Debugging step to check the workspace structure and the .war file
                        sh '''
                            echo "Checking if the ansible directory exists"
                            test -d ansible || echo "ansible directory does not exist, creating it..."
                            ls -l
                            test -f Amazon/Amazon-Web/target/Amazon.war || echo "Amazon.war not found"
                        '''

                        // Ensure the ansible directory exists
                        sh 'test -d ansible || mkdir -p ansible'

                        // Copy the WAR file to the ansible directory
                        sh 'cp Amazon/Amazon-Web/target/Amazon.war ansible/'

                        // Running the Ansible playbook
                        echo "$VAULT_PASS" > vault.txt
                        chmod 600 vault.txt
                        sh 'ansible-playbook -i ansible/hosts.ini ansible/deploy-tomcat.yml --vault-password-file vault.txt'
                        rm -f vault.txt
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful.'
        }
        failure {
            echo 'Pipeline failed. Check logs.'
        }
    }
}
